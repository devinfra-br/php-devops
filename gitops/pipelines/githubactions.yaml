name: Pipeline-Example-Laravel

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - 'release/*'
      - 'hotfix/*'
      - 'feature/*'
      - 'bugfix/*'
      - 'support/*'
      - 'chore/*'
      - 'docs/*'
      - 'refactor/*'
      - 'style/*'
      - 'test/*'    

# Environment variables
env:
  APP_NAME: laravel-app
  PATH_DOCKERFILE: ./gitops/build/Dockerfile

# Jobs definition 
jobs:
  # Tagging repository with the latest commit sha
  tagging_repo: 
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: '0' 
      # Dry run to get the next tag version            
      - name: Minor version for each merge
        id: taggerDryRun
        uses: anothrNick/github-tag-action@1.36.0
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          WITH_V: 'true'
          DRY_RUN: 'true'
      # Echo the new tag version
      - name: echo new tag
        run: |
          echo "The next tag version will be: ${{ steps.taggerDryRun.outputs.new_tag }}"
      # Echo the current tag    
      - name: echo tag
        run: |
          echo "The current tag is: ${{ steps.taggerDryRun.outputs.tag }}"
      # Echo the version increment    
      - name: echo part
        run: |
          echo "The version increment was: ${{ steps.taggerDryRun.outputs.part }}"     
      # Final tag version
      - name: Minor version for each merge
        id: taggerFinal
        uses: anothrNick/github-tag-action@1.36.0
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }} # GitHub token set in the repository secrets
          WITH_V: 'true'

  # Security scan for the images
  security_img_scan:
    runs-on: ubuntu-latest
    needs: [tagging_repo]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # Build the images
      - name: Build images 
        run: |
          docker build -t docker.io/${{ secrets.DOCKER_USERNAME }}/$APP_NAME:${{ github.sha }} -f $PATH_DOCKERFILE .
      # Security scan
      - name: Security scan
        uses: docker://aquasec/trivy:0.19.2
        with:
          args: --exit-code 1 --severity HIGH,CRITICAL docker.io/${{ secrets.DOCKER_USERNAME }}/$APP_NAME:${{ github.sha }}
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          #severity: 'CRITICAL,HIGH'
        continue-on-error: true

  # Build and push the images
  build_and_push:
    needs: security_img_scan
    runs-on: ubuntu-latest    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # Docker meta latest
      - name: Docker meta latest
        id: metalatest
        uses: docker/metadata-action@v5
        with:
          images: |
            $APP_NAME
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
      # Docker meta sha
      - name: Docker meta sha
        id: metasha
        uses: docker/metadata-action@v5
        with:
          images: |
            $APP_NAME
          tags: |
            type=sha,prefix=v-{{sha}}
      # Set up QEMU
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      # Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        id: docker_login
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and push image tag sha
      - name: Build and push image main
        uses: docker/build-push-action@v5
        id: docker_build_sha
        with:
          context: .
          file: $PATH_DOCKERFILE
          # Select the platforms to build the image
          platforms: linux/amd64,linux/arm64,linux/arm/v7,linux/arm64/v8,linux/ppc64le,linux/s390x
          push: true
          labels: ${{ steps.metasha.outputs.labels }}
          tags: |
            docker.io/${{ secrets.DOCKER_USERNAME }}/${{ steps.metasha.outputs.tags }}
      # Build and push image tag latest
      - name: Build and push image
        uses: docker/build-push-action@v5
        id: docker_build_latest
        with:
          context: .
          file: $PATH_DOCKERFILE
          # Select the platforms to build the image
          platforms: linux/amd64,linux/arm64,linux/arm/v7,linux/arm64/v8,linux/ppc64le,linux/s390x
          push: true
          labels: ${{ steps.metalatest.outputs.labels }}
          tags: |
            docker.io/${{ secrets.DOCKER_USERNAME }}/${{ steps.metalatest.outputs.tags }}
      # Echo the output version latest
      - name: Use output version latest
        id: output-version-latest
        run: echo ${{ steps.metalatest.outputs.tags }}            
      # Echo the output version sha
      - name: Use output version sha
        id: output-version-sha
        run: echo ${{ steps.metasha.outputs.tags }}